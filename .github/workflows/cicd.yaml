name: CI

on:
  push:
    branches: [main]
  pull_request:

env:
  docker_registry: ghcr.io
  docker_username: VoyTechnology
  docker_image: ghcr.io/saferplace/saferplace
  docker_platforms: linux/amd64,linux/arm64
  go_version: '1.17'

  # Terraform variables
  TF_VAR_nomad_address: ${{ secrets.NOMAD_ADDR }}
  TF_VAR_region:        ${{ secrets.NOMAD_REGION }}
  TF_VAR_datacenters:   ${{ secrets.NOMAD_DATACENTERS }}
  TF_VAR_namespace:     ${{ secrets.NOMAD_NAMESPACE }}
  TF_VAR_image:         # Deducted from docker steps

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.go_version }}

    - name: Checkout
      uses: actions/checkout@v2

    - name: Test
      run: go test ./...

  package:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker Meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ env.docker_image }}
          tag-sha: true

      - name: Setup Docker Cross Compilation
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker Layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to Github Docker registry
        uses: docker/login-action@v1
        with:
          username: ${{ env.docker_username }}
          password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}
          registry: ${{ env.docker_registry }}

      - name: Build and Push
        uses: docker/build-push-action@v2
        id: docker_build_push
        with:
          platforms: ${{ env.docker_platforms }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

  plan_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Connect to Tailscale
        uses: tailscale/github-action@v1
        with:
          authkey: ${{ secrets.TAILSCALE_AUTHKEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v2

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true
        env:
          TF_VAR_image: ${{ steps.docker_meta.outputs.tags }}

      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
        env:
          # Maybe get the first one if there are many?
          TF_VAR_image: ${{ steps.docker_meta.outputs.tags }}

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
        env:
         # Maybe get the first one if there are many?
          TF_VAR_image: ${{ steps.docker_meta.outputs.tags }}
