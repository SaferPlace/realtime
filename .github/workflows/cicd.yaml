name: CI

on:
  push:
    branches: [main]
  pull_request:

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE: ghcr.io/saferplace/saferplace
  DOCKER_PLATFORM: linux/amd64,linux/arm64

  # Terraform variables
  TF_VAR_nomad_address: ${{ secrets.NOMAD_ADDR }}
  TF_VAR_region:        ${{ secrets.NOMAD_REGION }}
  TF_VAR_datacenters:   ${{ secrets.NOMAD_DATACENTERS }}
  TF_VAR_namespace:     saferplace
  TF_VAR_image:         ghcr.io/saferplace/saferplace:${{ github.sha }} # TODO: deduct from docker steps

jobs:
  vendor:
    name: Dependencies
    runs-on: ubuntu-latest
    steps:
    - uses: actions/setup-go@v3
    - uses: actions/checkout@v3
    - uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - run: go mod download

  test:
    name: Test
    needs: vendor
    runs-on: ubuntu-latest
    steps:
    - uses: actions/setup-go@v3
    - uses: actions/checkout@v3
    - uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - run: go test ./...

  lint:
    name: Lint
    needs: vendor
    runs-on: ubuntu-latest
    steps:
    - uses: actions/setup-go@v3
    - uses: actions/checkout@v3
    - uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - uses: golangci/golangci-lint-action@v3

  build:
    name: Build
    needs: vendor
    runs-on: ubuntu-latest
    steps:
    - uses: actions/setup-go@v3
    - uses: actions/checkout@v3
    - uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - run: go build ./cmd/saferplace

  package:
    name: Package
    runs-on: ubuntu-latest
    needs: [test, build]
    steps:
    - uses: actions/checkout@v3
    - uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - uses: docker/setup-buildx-action@v2
    - uses: docker/login-action@v2
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Build and Push
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        platforms: ${{ env.DOCKER_PLATFORM }}
        tags: ${{ env.DOCKER_IMAGE}}:${{ github.ref_name }},${{ env.DOCKER_IMAGE}}:${{ github.sha }}

  prod_deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: package
    environment:
      name: production
      url: https://safer.place
    steps:
      - name: Connect to Tailscale
        uses: tailscale/github-action@v1
        with:
          authkey: ${{ secrets.TAILSCALE_AUTHKEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v3

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
