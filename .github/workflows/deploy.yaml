name: Deploy

on:
  push:
    branch: [ main ]
  pull_request:
    branch: [ main ]

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE: ghcr.io/saferplace/saferplace
  DOCKER_PLATFORM: linux/amd64,linux/arm64

    # Terraform variables
  TF_VAR_nomad_address:   ${{ secrets.NOMAD_ADDR }}
  TF_VAR_region:          ${{ secrets.NOMAD_REGION }}
  TF_VAR_datacenters:     ${{ secrets.NOMAD_DATACENTERS }}
  TF_VAR_docker_password: ${{ secrets.DOCKER_READ_TOKEN }}
  TF_VAR_eircode_token:   ${{ secrets.EIRCODE_TOKEN }}
  TF_VAR_namespace:       saferplace
  TF_VAR_image:           ghcr.io/saferplace/saferplace:${{ github.sha }} # TODO: deduct from docker steps

jobs:
  package:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: docker/setup-buildx-action@v2
    - uses: docker/login-action@v2
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ github.token }}
    - uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        platforms: ${{ env.DOCKER_PLATFORM }}
        tags: ${{ env.DOCKER_IMAGE}}:${{ github.sha }}
  deploy:
    runs-on: ubuntu-latest
    needs: [ package ]
    environment:
      name: production
      url: https://safer.place
    steps:
    - uses: actions/checkout@v3
    - uses: tailscale/github-action@v1
      with:
        authkey: ${{ secrets.TAILSCALE_AUTHKEY }}
    - uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    - run: terraform fmt -check
      id: fmt
    - run: terraform init
      id: init
    - run: terraform validate -no-color
      id: validate
    - run: terraform plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color
      continue-on-error: true
    # Update Pull Request (if pull request)
    - uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    - run: exit 1
      if: steps.plan.outcome == 'failure'
    - run: terraform apply -auto-approve
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'

